{"ast":null,"code":"import Keycloak from 'keycloak-js'; // We start by configuring the Keycloak javascript client\n// It needs to know your app id in order to authenticate users for it\n\nconst keycloak = Keycloak({\n  url: 'https://iam.ebrains.eu/auth',\n  realm: 'hbp',\n  clientId: 'live-paper-apps',\n  'public-client': true,\n  'confidential-port': 0\n});\nconst YOUR_APP_SCOPES = 'openid team email profile clb.wiki.read clb.drive:read clb.drive:write'; // full list at https://iam.ebrains.eu/auth/realms/hbp/.well-known/openid-configuration\n\nexport default function initAuth(main) {\n  console.log('DOM content is loaded, initialising Keycloak client...');\n  keycloak // .init({ flow: 'standard', pkceMethod: 'S256' })\n  .init({\n    flow: 'hybrid'\n  }).then(() => checkAuth(main)).catch(console.log);\n}\n\nfunction checkAuth(main) {\n  console.log('Keycloak client is initialised, verifying authentication...'); // Is the user anonymous or authenticated?\n\n  const isAuthenticated = keycloak.authenticated;\n  const isAnonymous = !keycloak.authenticated; // Is this app a standalone app, a framed app or a delegate?\n\n  const isParent = window.opener == null;\n  const isIframe = window !== window.parent;\n  const isMainFrame = window === window.parent;\n  const isStandaloneApp = isMainFrame && isParent;\n  const isFramedApp = isIframe && isParent;\n  const isDelegate = window.opener != null; // Posting and listening to messages\n\n  const postMessageToParentTab = (message, parentTabOrigin) => window.opener.postMessage(message, parentTabOrigin);\n\n  const listenToMessage = callback => window.addEventListener('message', callback);\n\n  const AUTH_MESSAGE = 'clb.authenticated';\n  const myAppOrigin = window.location.origin; // Manipulating URLs and tabs\n\n  const openTab = url => window.open(url);\n\n  const getCurrentURL = () => new URL(window.location);\n\n  const closeCurrentTab = () => window.close();\n\n  const login = scopes => keycloak.login({\n    scope: scopes\n  }); // A standalone app should simply login if the user is not authenticated\n  // and do its business logic otherwise\n\n\n  if (isStandaloneApp) {\n    console.log('This is a standalone app...');\n\n    if (isAnonymous) {\n      console.log('...which is not authenticated, starting login...');\n      return login(YOUR_APP_SCOPES);\n    }\n\n    if (isAuthenticated) {\n      console.log('...which is authenticated, starting business logic...');\n      return main(keycloak);\n    }\n  } // A framed app should open a delegate to do the authentication for it and listen to its messages and verify them\n  // If the user is authenticated, it should do its business logic\n\n\n  if (isFramedApp) {\n    console.log('This is a framed app...');\n\n    if (isAnonymous) {\n      console.log('...which is not authenticated, delegating to new tab...');\n      listenToMessage(verifyMessage);\n      return openTab(getCurrentURL());\n    }\n\n    if (isAuthenticated) {\n      console.log('...which is authenticated, starting business logic...');\n      return main(keycloak);\n    }\n  } // A delegate should login if the user is not authenticated\n  // Otherwise, it should inform its opener that the user is authenticated and close itself\n\n\n  if (isDelegate) {\n    console.log('This is a delegate tab...');\n\n    if (isAnonymous) {\n      console.log('...which is not authenticated, starting login...');\n      return login(YOUR_APP_SCOPES);\n    }\n\n    if (isAuthenticated) {\n      console.log('...which is authenticated, warn parent and close...');\n      postMessageToParentTab(AUTH_MESSAGE, myAppOrigin);\n      return closeCurrentTab();\n    }\n  }\n}\n\nfunction verifyMessage(event) {\n  console.log('Message receveived, verifying it...');\n  const AUTH_MESSAGE = 'clb.authenticated';\n  const receivedMessage = event.data;\n  const messageOrigin = event.origin;\n  const myAppOrigin = window.location.origin; // const reload = () => window.location.reload(); // TODO: remove?\n\n  const login = scopes => keycloak.login({\n    scope: scopes\n  }); // Stop if the message is not the auth message\n\n\n  if (receivedMessage !== AUTH_MESSAGE) return; // Stop if the message is not coming from our app origin\n\n  if (messageOrigin !== myAppOrigin) return; // Login otherwise\n\n  return login(YOUR_APP_SCOPES);\n}","map":{"version":3,"sources":["/home/shailesh/gits/collab-notebook-cloner/collab-notebook-cloner/src/auth.js"],"names":["Keycloak","keycloak","url","realm","clientId","YOUR_APP_SCOPES","initAuth","main","console","log","init","flow","then","checkAuth","catch","isAuthenticated","authenticated","isAnonymous","isParent","window","opener","isIframe","parent","isMainFrame","isStandaloneApp","isFramedApp","isDelegate","postMessageToParentTab","message","parentTabOrigin","postMessage","listenToMessage","callback","addEventListener","AUTH_MESSAGE","myAppOrigin","location","origin","openTab","open","getCurrentURL","URL","closeCurrentTab","close","login","scopes","scope","verifyMessage","event","receivedMessage","data","messageOrigin"],"mappings":"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","sourcesContent":["import Keycloak from 'keycloak-js';\n\n\n// We start by configuring the Keycloak javascript client\n// It needs to know your app id in order to authenticate users for it\nconst keycloak = Keycloak({\n    url: 'https://iam.ebrains.eu/auth',\n    realm: 'hbp',\n    clientId: 'live-paper-apps',\n    'public-client': true,\n    'confidential-port': 0,\n});\nconst YOUR_APP_SCOPES = 'openid team email profile clb.wiki.read clb.drive:read clb.drive:write';   // full list at https://iam.ebrains.eu/auth/realms/hbp/.well-known/openid-configuration\n\n\nexport default function initAuth(main) {\n    console.log('DOM content is loaded, initialising Keycloak client...');\n    keycloak\n        // .init({ flow: 'standard', pkceMethod: 'S256' })\n        .init({ flow: 'hybrid'})\n        .then(() => checkAuth(main))\n        .catch(console.log);\n}\n\n\nfunction checkAuth(main) {\n    console.log('Keycloak client is initialised, verifying authentication...');\n\n    // Is the user anonymous or authenticated?\n    const isAuthenticated = keycloak.authenticated;\n    const isAnonymous = !keycloak.authenticated;\n    // Is this app a standalone app, a framed app or a delegate?\n    const isParent = (window.opener == null);\n    const isIframe = (window !== window.parent);\n    const isMainFrame = (window === window.parent);\n    const isStandaloneApp = isMainFrame && isParent;\n    const isFramedApp = isIframe && isParent;\n    const isDelegate = (window.opener != null);\n    // Posting and listening to messages\n    const postMessageToParentTab = (message, parentTabOrigin) => window.opener.postMessage(message, parentTabOrigin);\n    const listenToMessage = (callback) => window.addEventListener('message', callback);\n    const AUTH_MESSAGE = 'clb.authenticated';\n    const myAppOrigin = window.location.origin;\n    // Manipulating URLs and tabs\n    const openTab = (url) => window.open(url);\n    const getCurrentURL = () => new URL(window.location);\n    const closeCurrentTab = () => window.close();\n\n    const login = (scopes) => keycloak.login({ scope: scopes });\n\n    // A standalone app should simply login if the user is not authenticated\n    // and do its business logic otherwise\n    if (isStandaloneApp) {\n        console.log('This is a standalone app...');\n        if (isAnonymous) {\n            console.log('...which is not authenticated, starting login...');\n            return login(YOUR_APP_SCOPES);\n        }\n        if (isAuthenticated) {\n            console.log('...which is authenticated, starting business logic...');\n            return main(keycloak);\n        }\n    }\n\n    // A framed app should open a delegate to do the authentication for it and listen to its messages and verify them\n    // If the user is authenticated, it should do its business logic\n    if (isFramedApp) {\n        console.log('This is a framed app...');\n        if (isAnonymous) {\n            console.log('...which is not authenticated, delegating to new tab...');\n            listenToMessage(verifyMessage);\n            return openTab(getCurrentURL());\n        }\n        if (isAuthenticated) {\n            console.log('...which is authenticated, starting business logic...');\n            return main(keycloak);\n        }\n    }\n\n    // A delegate should login if the user is not authenticated\n    // Otherwise, it should inform its opener that the user is authenticated and close itself\n    if (isDelegate) {\n        console.log('This is a delegate tab...');\n        if (isAnonymous) {\n            console.log('...which is not authenticated, starting login...');\n            return login(YOUR_APP_SCOPES);\n        }\n        if (isAuthenticated) {\n            console.log('...which is authenticated, warn parent and close...');\n            postMessageToParentTab(AUTH_MESSAGE, myAppOrigin);\n            return closeCurrentTab();\n        }\n    }\n}\n\nfunction verifyMessage(event) {\n    console.log('Message receveived, verifying it...');\n\n    const AUTH_MESSAGE = 'clb.authenticated';\n    const receivedMessage = event.data;\n    const messageOrigin = event.origin;\n    const myAppOrigin = window.location.origin;\n    // const reload = () => window.location.reload(); // TODO: remove?\n    const login = (scopes) => keycloak.login({ scope: scopes });\n\n\n    // Stop if the message is not the auth message\n    if (receivedMessage !== AUTH_MESSAGE) return;\n\n    // Stop if the message is not coming from our app origin\n    if (messageOrigin !== myAppOrigin) return;\n\n    // Login otherwise\n    return login(YOUR_APP_SCOPES);\n}"]},"metadata":{},"sourceType":"module"}